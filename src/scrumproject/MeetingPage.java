/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package scrumproject;

import com.sun.org.apache.bcel.internal.generic.Select;
import java.awt.event.ItemEvent;
import java.io.IOException;
import java.nio.file.LinkOption;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.sql.Date;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Locale;
import java.util.Properties;
import javax.mail.Message;
import javax.mail.MessagingException;
import javax.mail.PasswordAuthentication;
import javax.mail.Session;
import javax.mail.Transport;
import javax.mail.internet.InternetAddress;
import javax.mail.internet.MimeMessage;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import oru.inf.InfDB;
import oru.inf.InfException;
import static scrumproject.Validation.idb;

/**
 *
 *
 * @author donniegebrail
 */
public class MeetingPage extends javax.swing.JFrame {

    /**
     * Creates new form Meetings
     */
    public MeetingPage() {
        initComponents();
        Date date = new Date(System.currentTimeMillis() - 1 * 24 * 60 * 60 * 1000); //Subtraherar 1 dag i millisekunder
        jDateChooser.getDateEditor().setEnabled(false);
        jDateChooser.setDate(date);

        try {
            //Connects to database with an absolute path
            Path con = Paths.get("ScrumProject.FDB").toRealPath(LinkOption.NOFOLLOW_LINKS);
            idb = new InfDB(con.toString());
        } catch (InfException | IOException e) {
            JOptionPane.showMessageDialog(null, e);
        }

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
//Method for sending mail to invited employees for a meeting
    public void sendmail() {
      
        final String username = "testmailenscrum@gmail.com";
        final String password = "ScrumProjekt1";

        Properties props = new Properties();
        props.put("mail.smtp.starttls.enable", "true");
        props.put("mail.smtp.auth", "true");
        props.put("mail.smtp.host", "smtp.gmail.com");
        props.put("mail.smtp.port", "587");

        Session session = Session.getInstance(props,
                new javax.mail.Authenticator() {
            protected PasswordAuthentication getPasswordAuthentication() {
                return new PasswordAuthentication(username, password);
            }
        });

        try {
            String meetingName = txtMeetingName.getText();
            for (int i = 0; i < cbEmpoyeeInvite.getItemCount(); i++) {
                
                String name = cbEmpoyeeInvite.getItemAt(i);
                
                String [] splitt = name.split(", ");
                String id = splitt[1];
                
                String Mail = "Select EMAIL from EMPLOYEE where EMPLOYEEID = '" + id + "'";
                String to = idb.fetchSingle(Mail);

                Message message = new MimeMessage(session);
                message.setFrom(new InternetAddress("testmailenscrum@gmail.com"));
                message.setRecipients(Message.RecipientType.TO,
                        InternetAddress.parse(to));
                message.setSubject("Mötesinbjudan");
                message.setText("Hejsan, du har blivit inbjuden till ett nytt möte som heter " + meetingName + ", vänligen logga in och rösta på de tider du kan närvara!");

                Transport.send(message);
            }

        } catch (InfException | MessagingException e) {
            throw new RuntimeException(e);
        }
    }
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        btnStartPage = new javax.swing.JButton();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel5 = new javax.swing.JPanel();
        jPanel1 = new javax.swing.JPanel();
        btnSaveMeetingTime = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        btnDeleteTime = new javax.swing.JButton();
        txtMeetingName = new javax.swing.JTextField();
        cbChooseMeetingTime = new javax.swing.JComboBox<>();
        jLabel1 = new javax.swing.JLabel();
        jDateChooser = new com.toedter.calendar.JDateChooser();
        jScrollPane1 = new javax.swing.JScrollPane();
        tableSavedValues = new javax.swing.JTable();
        jPanel4 = new javax.swing.JPanel();
        cbChooseEmployee = new javax.swing.JComboBox<>();
        jLabel5 = new javax.swing.JLabel();
        cbEmpoyeeInvite = new javax.swing.JComboBox<>();
        jLabel6 = new javax.swing.JLabel();
        btnSaveChosenEmployee = new javax.swing.JButton();
        btnRemoveInvitation = new javax.swing.JButton();
        btnConfirmMeeting = new javax.swing.JButton();
        jPanel6 = new javax.swing.JPanel();
        jLabel7 = new javax.swing.JLabel();
        cobChooseMeetingInvitation = new javax.swing.JComboBox<>();
        jScrollPane2 = new javax.swing.JScrollPane();
        tableTimesForMeeting = new javax.swing.JTable();
        btnVote = new javax.swing.JButton();
        jLabel8 = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        tableUsersVotes = new javax.swing.JTable();
        btnChooseVote = new javax.swing.JButton();
        btnRemoveUserVote = new javax.swing.JButton();
        jLabel9 = new javax.swing.JLabel();
        txtChosenTime = new javax.swing.JTextField();
        jLabel11 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        btnStartPage.setText("Tillbaka");
        btnStartPage.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnStartPageActionPerformed(evt);
            }
        });

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("Boka ett möte"));

        btnSaveMeetingTime.setText("Spara");
        btnSaveMeetingTime.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnSaveMeetingTimeMouseClicked(evt);
            }
        });

        jLabel3.setText("Valda Datum och Tider:");

        jLabel2.setText("Välj tid:");

        jLabel4.setText("Skriv namn för mötet:");

        btnDeleteTime.setText("Ta bort ");
        btnDeleteTime.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnDeleteTimeMouseClicked(evt);
            }
        });

        cbChooseMeetingTime.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "06:00", "06:30", "07:00", "07:30", "08:00", "08:30", "09:00", "09:30", "10:00", "10:30", "11:00", "11:30", "12:00", "12:30", "13:00", "13:30", "14:00", "14:30", "15:00", "15:30", "16:00", "16:30", "17:00", "17:30", "18:00", "18:30", "19:00", "19:30", "20:00", "20:30", "21:00", "21:30" }));

        jLabel1.setText("Välj datum:");

        tableSavedValues.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Tid", "Datum"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tableSavedValues.getTableHeader().setReorderingAllowed(false);
        jScrollPane1.setViewportView(tableSavedValues);
        if (tableSavedValues.getColumnModel().getColumnCount() > 0) {
            tableSavedValues.getColumnModel().getColumn(0).setResizable(false);
            tableSavedValues.getColumnModel().getColumn(0).setPreferredWidth(22);
            tableSavedValues.getColumnModel().getColumn(1).setResizable(false);
        }

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 159, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLabel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(txtMeetingName, javax.swing.GroupLayout.PREFERRED_SIZE, 137, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(62, 62, 62))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1)
                            .addComponent(jDateChooser, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel2)
                            .addComponent(cbChooseMeetingTime, javax.swing.GroupLayout.PREFERRED_SIZE, 131, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addComponent(btnSaveMeetingTime, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(btnDeleteTime, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                        .addGap(22, 22, 22))))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(0, 8, Short.MAX_VALUE)
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 281, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtMeetingName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(7, 7, 7)
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jDateChooser, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(13, 13, 13)
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(cbChooseMeetingTime, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btnSaveMeetingTime)
                        .addGap(12, 12, 12)
                        .addComponent(btnDeleteTime)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );

        jPanel4.setBorder(javax.swing.BorderFactory.createTitledBorder("Skicka inbjudan till möte\n"));

        jLabel5.setText("Välj anställda:");

        cbEmpoyeeInvite.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { " " }));
        cbEmpoyeeInvite.setSelectedIndex(-1);

        jLabel6.setText("Anställda som ska få inbjudan:");

        btnSaveChosenEmployee.setText("Spara");
        btnSaveChosenEmployee.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnSaveChosenEmployeeMouseClicked(evt);
            }
        });

        btnRemoveInvitation.setText("Ta bort");
        btnRemoveInvitation.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnRemoveInvitationMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(cbChooseEmployee, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(cbEmpoyeeInvite, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel6)
                            .addComponent(btnSaveChosenEmployee)
                            .addComponent(btnRemoveInvitation)
                            .addComponent(jLabel5))
                        .addGap(0, 88, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel5)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(cbChooseEmployee, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(1, 1, 1)
                .addComponent(btnSaveChosenEmployee)
                .addGap(18, 18, 18)
                .addComponent(jLabel6)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(cbEmpoyeeInvite, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnRemoveInvitation)
                .addContainerGap(100, Short.MAX_VALUE))
        );

        btnConfirmMeeting.setText("Bekräfta möte");
        btnConfirmMeeting.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnConfirmMeetingMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 388, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(btnConfirmMeeting)
                    .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btnConfirmMeeting))
                    .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(0, 9, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Boka Möte", jPanel5);

        jLabel7.setText("Välj möte:");

        cobChooseMeetingInvitation.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { " " }));
        cobChooseMeetingInvitation.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cobChooseMeetingInvitationItemStateChanged(evt);
            }
        });

        tableTimesForMeeting.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "Datum", "Tid", "Röster"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tableTimesForMeeting.getTableHeader().setReorderingAllowed(false);
        jScrollPane2.setViewportView(tableTimesForMeeting);
        if (tableTimesForMeeting.getColumnModel().getColumnCount() > 0) {
            tableTimesForMeeting.getColumnModel().getColumn(0).setResizable(false);
            tableTimesForMeeting.getColumnModel().getColumn(0).setPreferredWidth(90);
            tableTimesForMeeting.getColumnModel().getColumn(1).setResizable(false);
            tableTimesForMeeting.getColumnModel().getColumn(1).setPreferredWidth(50);
            tableTimesForMeeting.getColumnModel().getColumn(2).setResizable(false);
            tableTimesForMeeting.getColumnModel().getColumn(2).setPreferredWidth(50);
        }

        btnVote.setText("Rösta");
        btnVote.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnVoteMouseClicked(evt);
            }
        });

        jLabel8.setText("Välj datum och tid: ");

        tableUsersVotes.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "Datum", "Tid", "Röster"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tableUsersVotes.getTableHeader().setReorderingAllowed(false);
        jScrollPane3.setViewportView(tableUsersVotes);
        if (tableUsersVotes.getColumnModel().getColumnCount() > 0) {
            tableUsersVotes.getColumnModel().getColumn(0).setResizable(false);
            tableUsersVotes.getColumnModel().getColumn(0).setPreferredWidth(90);
            tableUsersVotes.getColumnModel().getColumn(1).setResizable(false);
            tableUsersVotes.getColumnModel().getColumn(1).setPreferredWidth(50);
            tableUsersVotes.getColumnModel().getColumn(2).setResizable(false);
            tableUsersVotes.getColumnModel().getColumn(2).setPreferredWidth(50);
        }

        btnChooseVote.setText("Välj -->");
        btnChooseVote.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnChooseVoteMouseClicked(evt);
            }
        });

        btnRemoveUserVote.setText("Ta bort <--");
        btnRemoveUserVote.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnRemoveUserVoteMouseClicked(evt);
            }
        });

        jLabel9.setText("Dina Val:");

        txtChosenTime.setEditable(false);

        jLabel11.setText("Bestämd tid för möte:");

        javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel6Layout.createSequentialGroup()
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel11)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(txtChosenTime, javax.swing.GroupLayout.PREFERRED_SIZE, 298, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btnVote, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel6Layout.createSequentialGroup()
                        .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel7)
                            .addComponent(cobChooseMeetingInvitation, javax.swing.GroupLayout.PREFERRED_SIZE, 132, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(16, 16, 16)
                        .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel8)
                            .addGroup(jPanel6Layout.createSequentialGroup()
                                .addGap(23, 23, 23)
                                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 218, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanel6Layout.createSequentialGroup()
                                        .addGap(34, 34, 34)
                                        .addComponent(btnChooseVote))
                                    .addGroup(jPanel6Layout.createSequentialGroup()
                                        .addGap(18, 18, 18)
                                        .addComponent(btnRemoveUserVote, javax.swing.GroupLayout.PREFERRED_SIZE, 113, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 41, Short.MAX_VALUE)
                        .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 218, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel9))))
                .addContainerGap())
        );
        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel6Layout.createSequentialGroup()
                        .addGap(37, 37, 37)
                        .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel7)
                            .addComponent(jLabel8)))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel6Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel9)))
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel6Layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(cobChooseMeetingInvitation, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 252, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 252, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jPanel6Layout.createSequentialGroup()
                        .addGap(63, 63, 63)
                        .addComponent(btnChooseVote)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btnRemoveUserVote)))
                .addGap(10, 10, 10)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnVote)
                    .addComponent(txtChosenTime, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel11))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Svara på Mötesförfrågning", jPanel6);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(btnStartPage)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addComponent(jTabbedPane1)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jTabbedPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 414, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(btnStartPage)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnStartPageActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnStartPageActionPerformed
        StartPage startPage = new StartPage();
        this.setVisible(false);
        startPage.setVisible(true);
    }//GEN-LAST:event_btnStartPageActionPerformed

    private void btnSaveMeetingTimeMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnSaveMeetingTimeMouseClicked
        Date date = new Date(jDateChooser.getDate().getTime());
        Object item = cbChooseMeetingTime.getSelectedItem();
        Validation validation = new Validation();
        if (validation.checkCurrentDate(date) == true) {
            JOptionPane.showMessageDialog(null, "Välj att ett datum som inte passerats!");
        } else {
            DefaultTableModel model = (DefaultTableModel) tableSavedValues.getModel();
            String[] values;
            values = new String[]{item.toString(), date.toString()};
            model.addRow(values); //Lägg till rad i jTable:s modell
        }
        cbChooseMeetingTime.setSelectedIndex(0);

    }//GEN-LAST:event_btnSaveMeetingTimeMouseClicked

    private void btnDeleteTimeMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnDeleteTimeMouseClicked
        // TODO add your handling code here:
        DefaultTableModel model = (DefaultTableModel) tableSavedValues.getModel();

        int[] rows = tableSavedValues.getSelectedRows();
        for (int i = 0; i < rows.length; i++) {
            model.removeRow(rows[i] - i);
        }

    }//GEN-LAST:event_btnDeleteTimeMouseClicked

    private void btnSaveChosenEmployeeMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnSaveChosenEmployeeMouseClicked
        // TODO add your handling code here:

        Object item = cbChooseEmployee.getSelectedItem();
        cbEmpoyeeInvite.addItem(item.toString());
        cbChooseEmployee.removeItem(item);
    }//GEN-LAST:event_btnSaveChosenEmployeeMouseClicked

    private void btnRemoveInvitationMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnRemoveInvitationMouseClicked
        // TODO add your handling code here:
        Object item = cbEmpoyeeInvite.getSelectedItem();
        cbChooseEmployee.addItem(item.toString());
        cbEmpoyeeInvite.removeItem(item);

    }//GEN-LAST:event_btnRemoveInvitationMouseClicked

    private void btnConfirmMeetingMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnConfirmMeetingMouseClicked
        // TODO add your handling code here:
        Date chosenDate = new Date(jDateChooser.getDate().getTime()); //Hämtar ut input från JDateChooser och omvanldar den till sql date form
        String meetingName = txtMeetingName.getText();
        String timeId = "";
        String meetingId = "";
        String loggdInId = Validation.getIdInlogged();
        Validation validation = new Validation();
        DefaultTableModel model = (DefaultTableModel) tableSavedValues.getModel();
        int rows = model.getRowCount();
        int count = cbEmpoyeeInvite.getItemCount();
        try {
            if (validation.checkIfTxtIsEmpty(meetingName) == true) {
                JOptionPane.showMessageDialog(null, "Fyll i namn för mötet");
            } else if (validation.checkIfMeetingNameExists(meetingName) == true) {
                JOptionPane.showMessageDialog(null, "Namnet för mötet du valt finns redan!");
            } else if (validation.checkCurrentDate(chosenDate) == true) {
                JOptionPane.showMessageDialog(null, "Välj att ett datum som inte passerats!");
            } else if (validation.checkNullInvites(count)) {
                JOptionPane.showMessageDialog(null, "Bjud in minst 1 person till mötet!");
            } else {
                meetingId = idb.getAutoIncrement("Meeting", "MEETINGID");
                String sql1 = "insert into MEETING(MEETINGID, MEETINGNAME, ISADMINMEETING)"
                        + "values (" + meetingId + ", '" + meetingName + "', " + loggdInId + ")";
                idb.insert(sql1);
                for (int i = 0; i < rows; i++) {
                    String time = (String) tableSavedValues.getValueAt(i, 0);
                    String date = (String) tableSavedValues.getValueAt(i, 1);

                    timeId = idb.getAutoIncrement("Times", "TIMEID");

                    String sql = "INSERT INTO TIMES (TIMEID, TIMEHOUR, DATETIME, MEETING)\n"
                            + " VALUES (" + timeId + ", '" + time + "', '" + date + "', " + meetingId + ")";

                    idb.insert(sql);
                }

                for (int n = 0; n < count; n++) {
                    String extra = idb.getAutoIncrement("INVITEDEMPLOYEE", "IEID");
                    String invited = cbEmpoyeeInvite.getItemAt(n);
                    String [] splitt = invited.split(", ");
                    String id = splitt[1];
                    String invitedId = "Select EMPLOYEEID from EMPLOYEE where EMPLOYEEID = '" + id + "'";
                    String in = idb.fetchSingle(invitedId);

                    String sql2 = "insert into INVITEDEMPLOYEE "
                            + "values (" + extra + ", " + meetingId + ", " + in + ")";
                    idb.insert(sql2);
                }
                validation.CoBInvitedForMeeting(cobChooseMeetingInvitation);
                sendmail();
                JOptionPane.showMessageDialog(null, "Nytt möte tillagt och mail har skickats till de som bjudits in!");
                StartPage startPage = new StartPage();
                this.setVisible(false);
                startPage.setVisible(true);
            }

        } catch (InfException e) {
            JOptionPane.showMessageDialog(null, "Fail");
        }


    }//GEN-LAST:event_btnConfirmMeetingMouseClicked

    private void cobChooseMeetingInvitationItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cobChooseMeetingInvitationItemStateChanged
        Object item = evt.getItem();
        Validation val = new Validation();

        if (evt.getStateChange() == ItemEvent.SELECTED) {
            try {

                txtChosenTime.setText(val.getVoteResult(item.toString()));
                String sqltimeAndDate = "select timehour as A, datetime as B, count(timesid) as C from times\n"
                        + "left join MEETING on times.MEETING = MEETING.MEETINGID\n"
                        + "left join INVITATIONFORMEETING on times.TIMEID = INVITATIONFORMEETING.TIMESID and INVITATIONFORMEETING.MEETINGSID = MEETING.MEETINGID \n"
                        + "where meetingname = '" + item.toString() + "'\n"
                        + "group by A, B";

                //Hämta ut model för jTable och "casta" till DefaultTablemodel
                DefaultTableModel model = (DefaultTableModel) tableTimesForMeeting.getModel();
                //Sätt rowcount till 0 för att nolla/tömma tabellens modell. 
                model.setRowCount(0);

                //Hämta ut alla rader från databasen
                ArrayList<HashMap<String, String>> hamta = idb.fetchRows(sqltimeAndDate);

                model = (DefaultTableModel) tableTimesForMeeting.getModel();

                //Skapa tom array av strängar för att hålla våra värden som ska in i tabellen
                String[] values;
                //Loopa igenom listan från db
                for (int i = 0; i < hamta.size(); i++) {
                    //lägg till värden i arrayen för "A", "B" och "C" (se sql-fråga).

                    values = new String[]{hamta.get(i).get("B"), hamta.get(i).get("A"), hamta.get(i).get("C")};

                    //Lägg till rad i jTable:s modell
                    model.addRow(values);
                }

            } catch (InfException ex) {
            }
        }


    }//GEN-LAST:event_cobChooseMeetingInvitationItemStateChanged

    private void btnVoteMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnVoteMouseClicked
        Validation validation = new Validation();
        DefaultTableModel model = (DefaultTableModel) tableUsersVotes.getModel();
        int rows = model.getRowCount();
        String invitId = "";
        String employeeId = Validation.getIdInlogged();
        Object item = cobChooseMeetingInvitation.getSelectedItem();

        String sqlM = "SELECT meetingid from MEETING\n"
                + "where meetingname = '" + item.toString() + "'";

        try {
            String meetingId = idb.fetchSingle(sqlM);
            if (validation.CheckIfAdminForMeeting(item.toString()) == true && tableUsersVotes.getRowCount() > 1) {
                JOptionPane.showMessageDialog(null, "Som administratör för mötet får du bara rösta på en tid!");

            } else if (validation.getAdminVoteResult(item.toString()) == true) {

                JOptionPane.showMessageDialog(null, "Admin har redan valt en tid, röstning avslutad för mötet: " + item.toString());
            } else {
                for (int i = 0; i < rows; i++) {
                    String date = (String) tableUsersVotes.getValueAt(i, 0);
                    String time = (String) tableUsersVotes.getValueAt(i, 1);

                    String sqlT = "select timeid from times \n"
                            + "where timehour ='" + time + "' and datetime ='" + date + "'";
                    String timesId = idb.fetchSingle(sqlT);

                    invitId = idb.getAutoIncrement("INVITATIONFORMEETING", "INVITID");

                    String sql = "INSERT INTO INVITATIONFORMEETING (INVITID, MEETINGSID, TIMESID, EMPLOYEESID)\n"
                            + " VALUES (" + invitId + ", " + meetingId + ", " + timesId + ", " + employeeId + ")";

                    idb.insert(sql);

                }
                JOptionPane.showMessageDialog(null, "Du har röstat på följade möte: " + item.toString());
                StartPage startPage = new StartPage();
                this.setVisible(false);
                startPage.setVisible(true);

            }
        } catch (InfException e) {
            JOptionPane.showMessageDialog(null, "Fail");
        }


    }//GEN-LAST:event_btnVoteMouseClicked

    private void btnChooseVoteMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnChooseVoteMouseClicked
        try {
            int test = tableTimesForMeeting.getSelectedRow();
            Object item1 = tableTimesForMeeting.getValueAt(test, 0);
            Object item2 = tableTimesForMeeting.getValueAt(test, 1);
            Object item3 = tableTimesForMeeting.getValueAt(test, 2);

            DefaultTableModel model = (DefaultTableModel) tableUsersVotes.getModel();
            String[] values;
            values = new String[]{item1.toString(), item2.toString(), item3.toString()};
            model.addRow(values);

            DefaultTableModel model1 = (DefaultTableModel) tableTimesForMeeting.getModel();

            int[] rows = tableTimesForMeeting.getSelectedRows();
            for (int i = 0; i < rows.length; i++) {
                model1.removeRow(rows[i] - i);
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Markera en tid!");
        }
    }//GEN-LAST:event_btnChooseVoteMouseClicked

    private void btnRemoveUserVoteMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnRemoveUserVoteMouseClicked

        try {
            int test = tableUsersVotes.getSelectedRow();
            Object item1 = tableUsersVotes.getValueAt(test, 0);
            Object item2 = tableUsersVotes.getValueAt(test, 1);
            Object item3 = tableUsersVotes.getValueAt(test, 2);

            DefaultTableModel model = (DefaultTableModel) tableTimesForMeeting.getModel();
            String[] values;
            values = new String[]{item1.toString(), item2.toString(), item3.toString()};
            model.addRow(values);

            DefaultTableModel model1 = (DefaultTableModel) tableUsersVotes.getModel();

            int[] rows = tableUsersVotes.getSelectedRows();
            for (int i = 0; i < rows.length; i++) {
                model1.removeRow(rows[i] - i);
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Välj en tid att ta bort!");
        }
    }//GEN-LAST:event_btnRemoveUserVoteMouseClicked

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;

                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MeetingPage.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MeetingPage.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MeetingPage.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MeetingPage.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MeetingPage().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnChooseVote;
    private javax.swing.JButton btnConfirmMeeting;
    private javax.swing.JButton btnDeleteTime;
    private javax.swing.JButton btnRemoveInvitation;
    private javax.swing.JButton btnRemoveUserVote;
    private javax.swing.JButton btnSaveChosenEmployee;
    private javax.swing.JButton btnSaveMeetingTime;
    private javax.swing.JButton btnStartPage;
    private javax.swing.JButton btnVote;
    public javax.swing.JComboBox<String> cbChooseEmployee;
    private javax.swing.JComboBox<String> cbChooseMeetingTime;
    public javax.swing.JComboBox<String> cbEmpoyeeInvite;
    public javax.swing.JComboBox<String> cobChooseMeetingInvitation;
    private com.toedter.calendar.JDateChooser jDateChooser;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JTable tableSavedValues;
    public javax.swing.JTable tableTimesForMeeting;
    public javax.swing.JTable tableUsersVotes;
    private javax.swing.JTextField txtChosenTime;
    private javax.swing.JTextField txtMeetingName;
    // End of variables declaration//GEN-END:variables
}
